#cpp file init snippets
snippet cpp "c++ start snippets"
#include <iostream>
#include <string>
${1}

using namespace std;

int main()
{
  return 0;
}

endsnippet

#cpp class snippets
snippet class_simple "c++ class snippets"
class ${1:ClassName}
{
  public:
		${2}
};

endsnippet

snippet class_init "c++ class snippets with init func"
class ${1:ClassName}
{
  public:
    ${1:ClassName}(${2})
    {
			${3}
    }

};

endsnippet

snippet class_son "c++ class snippets with heir"
class ${1:Son}:${2:public} ${3:Base}
{
  public:
		${4}
};

endsnippet

snippet outFunc "function out of the class"
${1:void} ${2:ClassName}::${3:functionName}()
{
  ${4}
}

endsnippet

snippet hpp "cpp snippets for h file"
#pragma once
#include <iostream>
#include <string>
using namespace std;

class ${1:className}
{
	public:
		${1:className}();
		~${1:className}();
};

endsnippet

snippet leetcode "cpp snippets for leetcode solution"
#include <algorithm>
#include <climits>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

class Solution
{
	public:

	private:

};

int main() {

	return 0;
}
endsnippet
